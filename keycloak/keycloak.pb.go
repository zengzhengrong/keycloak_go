// Code generated by protoc-gen-go. DO NOT EDIT.
// source: keycloak.proto

package keycloak

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The response message
type Reply struct {
	Statuscode           int32    `protobuf:"varint,1,opt,name=statuscode,proto3" json:"statuscode,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_73ecf380dc75aed0, []int{0}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetStatuscode() int32 {
	if m != nil {
		return m.Statuscode
	}
	return 0
}

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Reply)(nil), "keycloak.Reply")
}

func init() { proto.RegisterFile("keycloak.proto", fileDescriptor_73ecf380dc75aed0) }

var fileDescriptor_73ecf380dc75aed0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8e, 0xcf, 0x4a, 0xc4, 0x30,
	0x18, 0xc4, 0x8d, 0xb0, 0xbb, 0xfa, 0x81, 0x2e, 0xe4, 0x20, 0x75, 0x05, 0x59, 0x7a, 0xea, 0x41,
	0x52, 0xb0, 0xbe, 0x80, 0x05, 0x4f, 0x5e, 0x4a, 0xfb, 0x04, 0x69, 0xfa, 0x19, 0x4a, 0x53, 0x12,
	0xf2, 0x47, 0x2c, 0xf8, 0xf0, 0xd2, 0xd6, 0x14, 0xaf, 0x1e, 0x67, 0x98, 0x99, 0xdf, 0xc0, 0xed,
	0x80, 0x93, 0x50, 0x9a, 0x0f, 0xcc, 0x58, 0xed, 0x35, 0xbd, 0x8a, 0xfa, 0xf4, 0x20, 0xb5, 0x96,
	0x0a, 0xf3, 0xc5, 0x6f, 0xc3, 0x47, 0x8e, 0xa3, 0xf1, 0xd3, 0x1a, 0x4b, 0x5f, 0x61, 0x57, 0xa3,
	0x51, 0x13, 0x7d, 0x04, 0x70, 0x9e, 0xfb, 0xe0, 0x84, 0xee, 0x30, 0x21, 0x67, 0x92, 0xed, 0xea,
	0x3f, 0x0e, 0x4d, 0xe0, 0x30, 0xa2, 0x73, 0x5c, 0x62, 0x72, 0x79, 0x26, 0xd9, 0x75, 0x1d, 0xe5,
	0xf3, 0x37, 0x1c, 0xdf, 0x7f, 0x59, 0x0d, 0xda, 0xcf, 0x5e, 0x20, 0x2d, 0x60, 0x5f, 0x85, 0x56,
	0xf5, 0x82, 0xde, 0xb1, 0x95, 0xce, 0x22, 0x9d, 0xbd, 0xcd, 0xf4, 0xd3, 0x91, 0x6d, 0x7f, 0x17,
	0x7e, 0x7a, 0x41, 0x5f, 0xe0, 0xd0, 0xa0, 0x08, 0x16, 0xbb, 0x7f, 0xb4, 0xca, 0x27, 0xb8, 0xef,
	0x35, 0x93, 0xd6, 0x08, 0x86, 0x5f, 0x7c, 0x34, 0x0a, 0xdd, 0x16, 0x2a, 0x6f, 0xe2, 0xb1, 0x6a,
	0xde, 0xa9, 0x48, 0xbb, 0x5f, 0x06, 0x8b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0xc8, 0x9f,
	0x46, 0x2e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeycloakServiceClient is the client API for KeycloakService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeycloakServiceClient interface {
	// Public & Secured
	Public(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Reply, error)
	Secured(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Reply, error)
}

type keycloakServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeycloakServiceClient(cc grpc.ClientConnInterface) KeycloakServiceClient {
	return &keycloakServiceClient{cc}
}

func (c *keycloakServiceClient) Public(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/keycloak.KeycloakService/Public", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakServiceClient) Secured(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/keycloak.KeycloakService/Secured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeycloakServiceServer is the server API for KeycloakService service.
type KeycloakServiceServer interface {
	// Public & Secured
	Public(context.Context, *empty.Empty) (*Reply, error)
	Secured(context.Context, *empty.Empty) (*Reply, error)
}

// UnimplementedKeycloakServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKeycloakServiceServer struct {
}

func (*UnimplementedKeycloakServiceServer) Public(ctx context.Context, req *empty.Empty) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Public not implemented")
}
func (*UnimplementedKeycloakServiceServer) Secured(ctx context.Context, req *empty.Empty) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Secured not implemented")
}

func RegisterKeycloakServiceServer(s *grpc.Server, srv KeycloakServiceServer) {
	s.RegisterService(&_KeycloakService_serviceDesc, srv)
}

func _KeycloakService_Public_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakServiceServer).Public(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keycloak.KeycloakService/Public",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakServiceServer).Public(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakService_Secured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakServiceServer).Secured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keycloak.KeycloakService/Secured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakServiceServer).Secured(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeycloakService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keycloak.KeycloakService",
	HandlerType: (*KeycloakServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Public",
			Handler:    _KeycloakService_Public_Handler,
		},
		{
			MethodName: "Secured",
			Handler:    _KeycloakService_Secured_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keycloak.proto",
}
